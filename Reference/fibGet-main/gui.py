#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.9.6 on Tue Jan 18 20:08:31 2022
#

import wx

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode

import matplotlib
from matplotlib.figure import Figure
from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas
# end wxGlade


class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((884, 720))
        
        # Menu Bar
        self.frame_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(wx.ID_ANY, "&New", "")
        wxglade_tmp_menu.Append(wx.ID_ANY, "&Save", "")
        wxglade_tmp_menu.Append(wx.ID_ANY, "&Export", "")
        wxglade_tmp_menu.Append(wx.ID_ANY, "&Save as", "")
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(wx.ID_ANY, "E&xit", "")
        self.frame_menubar.Append(wxglade_tmp_menu, "&File")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(wx.ID_ANY, "&about fibGet", "")
        self.frame_menubar.Append(wxglade_tmp_menu, "&About")
        self.SetMenuBar(self.frame_menubar)
        # Menu Bar end
        
        # Tool Bar
        self.frame_toolbar = wx.ToolBar(self, -1, style=wx.TB_DEFAULT_STYLE)
        self.SetToolBar(self.frame_toolbar)
        # Tool Bar end
        self.text_ctrl_2 = wx.TextCtrl(self, wx.ID_ANY, "./sample/sample.csv")
        self.button_2 = wx.Button(self, wx.ID_ANY, u"…")
        figure = self.matplotlib_figure = Figure(tight_layout=True)
        # 1x1 grid, first subplot
        self.matplotlib_axes = figure.add_subplot(111)
        self.matplotlib_canvas = FigureCanvas(self, wx.ID_ANY, figure)
        self.panel_1 = wx.Panel(self, wx.ID_ANY)
        self.text_ctrl_nn = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.BORDER_NONE | wx.TE_READONLY | wx.TE_RIGHT)
        self.text_ctrl_mcx = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.BORDER_NONE | wx.TE_READONLY | wx.TE_RIGHT)
        self.text_ctrl_mcy = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.BORDER_NONE | wx.TE_READONLY | wx.TE_RIGHT)
        self.text_ctrl_max = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.BORDER_NONE | wx.TE_READONLY | wx.TE_RIGHT)
        self.text_ctrl_may = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.BORDER_NONE | wx.TE_READONLY | wx.TE_RIGHT)
        self.text_ctrl_mux = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.BORDER_NONE | wx.TE_READONLY | wx.TE_RIGHT)
        self.text_ctrl_muy = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.BORDER_NONE | wx.TE_READONLY | wx.TE_RIGHT)
        self.list_ctrl_input = wx.ListCtrl(self, wx.ID_ANY, style=wx.LC_HRULES | wx.LC_REPORT | wx.LC_VRULES)
        figure2 = self.matplotlib_figure2 = Figure(tight_layout=True)
        # 1x1 grid, first subplot
        self.matplotlib_axes2 = figure2.add_subplot(4,1,(1,2))
        #
        #figure3 = self.matplotlib_figure3 = Figure(tight_layout=True)
        # 1x1 grid, first subplot
        self.matplotlib_axes3 = figure2.add_subplot(413)
        self.matplotlib_axes4 = figure2.add_subplot(414)
        self.matplotlib_canvas2 = FigureCanvas(self, wx.ID_ANY, figure2)
        self.button_10 = wx.Button(self, wx.ID_ANY, "View Model")
        self.button_6 = wx.Button(self, wx.ID_ANY, "View Conter (Check)")
        self.button_3 = wx.Button(self, wx.ID_ANY, u"M-φ")
        self.button_8 = wx.Button(self, wx.ID_ANY, "Mx-My")
        self.button_7 = wx.Button(self, wx.ID_ANY, "Run All")
        self.button_9 = wx.Button(self, wx.ID_ANY, "Export")
        self.button_5 = wx.Button(self, wx.ID_ANY, "Report")
        self.button_4 = wx.Button(self, wx.ID_ANY, "Cancel")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.OnChooseOutputFile, self.button_2)
        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnShow, self.list_ctrl_input)
        self.Bind(wx.EVT_BUTTON, self.OnPlot, self.button_10)
        self.Bind(wx.EVT_BUTTON, self.OnConter, self.button_6)
        self.Bind(wx.EVT_BUTTON, self.OnExec, self.button_3)
        self.Bind(wx.EVT_BUTTON, self.OnMxMy, self.button_8)
        self.Bind(wx.EVT_BUTTON, self.On_all_cal, self.button_7)
        self.Bind(wx.EVT_BUTTON, self.OnExport, self.button_9)
        self.Bind(wx.EVT_BUTTON, self.OnReport, self.button_5)
        self.Bind(wx.EVT_BUTTON, self.OnCancel, self.button_4)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("FibGet")
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(wx.Bitmap("./icon/fibGet.png", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.SetBackgroundColour(wx.Colour(47, 47, 47))
        self.SetForegroundColour(wx.Colour(0, 0, 0))
        self.frame_toolbar.Realize()
        self.matplotlib_canvas.SetMinSize((50, 50))
        self.text_ctrl_nn.SetBackgroundColour(wx.Colour(47, 47, 47))
        self.text_ctrl_nn.SetForegroundColour(wx.Colour(192, 192, 192))
        self.text_ctrl_mcx.SetBackgroundColour(wx.Colour(47, 47, 47))
        self.text_ctrl_mcx.SetForegroundColour(wx.Colour(192, 192, 192))
        self.text_ctrl_mcy.SetBackgroundColour(wx.Colour(47, 47, 47))
        self.text_ctrl_mcy.SetForegroundColour(wx.Colour(192, 192, 192))
        self.text_ctrl_max.SetBackgroundColour(wx.Colour(47, 47, 47))
        self.text_ctrl_max.SetForegroundColour(wx.Colour(192, 192, 192))
        self.text_ctrl_may.SetBackgroundColour(wx.Colour(47, 47, 47))
        self.text_ctrl_may.SetForegroundColour(wx.Colour(192, 192, 192))
        self.text_ctrl_mux.SetBackgroundColour(wx.Colour(47, 47, 47))
        self.text_ctrl_mux.SetForegroundColour(wx.Colour(192, 192, 192))
        self.text_ctrl_muy.SetBackgroundColour(wx.Colour(47, 47, 47))
        self.text_ctrl_muy.SetForegroundColour(wx.Colour(192, 192, 192))
        self.list_ctrl_input.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        self.list_ctrl_input.AppendColumn("CAL", format=wx.LIST_FORMAT_LEFT, width=40)
        self.list_ctrl_input.AppendColumn("ID", format=wx.LIST_FORMAT_LEFT, width=40)
        self.list_ctrl_input.AppendColumn("Sym.", format=wx.LIST_FORMAT_LEFT, width=-1)
        self.list_ctrl_input.AppendColumn("File", format=wx.LIST_FORMAT_LEFT, width=-1)
        self.list_ctrl_input.AppendColumn("N", format=wx.LIST_FORMAT_LEFT, width=-1)
        self.list_ctrl_input.AppendColumn(u"θ", format=wx.LIST_FORMAT_LEFT, width=-1)
        self.matplotlib_canvas2.SetMinSize((100, 100))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_13 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_8 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_10 = wx.BoxSizer(wx.VERTICAL)
        sizer_6 = wx.BoxSizer(wx.VERTICAL)
        sizer_14 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_12 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_11 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_9 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        label_3 = wx.StaticText(self, wx.ID_ANY, "Control file", style=wx.ALIGN_CENTER)
        label_3.SetForegroundColour(wx.Colour(192, 192, 192))
        sizer_4.Add(label_3, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        sizer_4.Add(self.text_ctrl_2, 2, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        sizer_4.Add(self.button_2, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        sizer_1.Add(sizer_4, 0, wx.EXPAND, 0)
        sizer_10.Add(self.matplotlib_canvas, 2, wx.ALL | wx.EXPAND, 5)
        label_2 = wx.StaticText(self.panel_1, wx.ID_ANY, "Capacity")
        label_2.SetForegroundColour(wx.Colour(192, 192, 192))
        sizer_6.Add(label_2, 1, wx.ALL, 1)
        label_4 = wx.StaticText(self.panel_1, wx.ID_ANY, "N=")
        label_4.SetMinSize((50, 16))
        label_4.SetForegroundColour(wx.Colour(192, 192, 192))
        sizer_9.Add(label_4, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_9.Add(self.text_ctrl_nn, 0, 0, 0)
        label_5 = wx.StaticText(self.panel_1, wx.ID_ANY, "kN")
        label_5.SetForegroundColour(wx.Colour(192, 192, 192))
        sizer_9.Add(label_5, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_6.Add(sizer_9, 0, wx.EXPAND, 0)
        label_6 = wx.StaticText(self.panel_1, wx.ID_ANY, "Mcx=")
        label_6.SetMinSize((50, 16))
        label_6.SetForegroundColour(wx.Colour(192, 192, 192))
        sizer_11.Add(label_6, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_11.Add(self.text_ctrl_mcx, 0, 0, 0)
        label_7 = wx.StaticText(self.panel_1, wx.ID_ANY, "kN.m")
        label_7.SetMinSize((50, 16))
        label_7.SetForegroundColour(wx.Colour(192, 192, 192))
        sizer_11.Add(label_7, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        label_14 = wx.StaticText(self.panel_1, wx.ID_ANY, "Mcy=")
        label_14.SetMinSize((50, 16))
        label_14.SetForegroundColour(wx.Colour(192, 192, 192))
        sizer_11.Add(label_14, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_11.Add(self.text_ctrl_mcy, 0, 0, 0)
        label_15 = wx.StaticText(self.panel_1, wx.ID_ANY, "kN.m")
        label_15.SetForegroundColour(wx.Colour(192, 192, 192))
        sizer_11.Add(label_15, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_6.Add(sizer_11, 0, wx.EXPAND, 0)
        label_8 = wx.StaticText(self.panel_1, wx.ID_ANY, "Max=")
        label_8.SetMinSize((50, 16))
        label_8.SetForegroundColour(wx.Colour(192, 192, 192))
        sizer_12.Add(label_8, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_12.Add(self.text_ctrl_max, 0, 0, 0)
        label_9 = wx.StaticText(self.panel_1, wx.ID_ANY, "kN.m")
        label_9.SetMinSize((50, 16))
        label_9.SetForegroundColour(wx.Colour(192, 192, 192))
        sizer_12.Add(label_9, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        label_16 = wx.StaticText(self.panel_1, wx.ID_ANY, "May=")
        label_16.SetMinSize((50, 16))
        label_16.SetForegroundColour(wx.Colour(192, 192, 192))
        sizer_12.Add(label_16, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_12.Add(self.text_ctrl_may, 0, 0, 0)
        label_17 = wx.StaticText(self.panel_1, wx.ID_ANY, "kN.m")
        label_17.SetForegroundColour(wx.Colour(192, 192, 192))
        sizer_12.Add(label_17, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_6.Add(sizer_12, 0, wx.EXPAND, 0)
        label_12 = wx.StaticText(self.panel_1, wx.ID_ANY, "Mux=")
        label_12.SetMinSize((50, 16))
        label_12.SetForegroundColour(wx.Colour(192, 192, 192))
        sizer_14.Add(label_12, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_14.Add(self.text_ctrl_mux, 0, 0, 0)
        label_13 = wx.StaticText(self.panel_1, wx.ID_ANY, "kN.m")
        label_13.SetMinSize((50, 16))
        label_13.SetForegroundColour(wx.Colour(192, 192, 192))
        sizer_14.Add(label_13, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        label_10 = wx.StaticText(self.panel_1, wx.ID_ANY, "Muy=")
        label_10.SetMinSize((50, 16))
        label_10.SetForegroundColour(wx.Colour(192, 192, 192))
        sizer_14.Add(label_10, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_14.Add(self.text_ctrl_muy, 0, 0, 0)
        label_11 = wx.StaticText(self.panel_1, wx.ID_ANY, "kN.m")
        label_11.SetForegroundColour(wx.Colour(192, 192, 192))
        sizer_14.Add(label_11, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_6.Add(sizer_14, 0, wx.EXPAND, 0)
        self.panel_1.SetSizer(sizer_6)
        sizer_10.Add(self.panel_1, 0, wx.ALL | wx.EXPAND, 5)
        sizer_10.Add(self.list_ctrl_input, 0, wx.ALL | wx.EXPAND, 5)
        sizer_7.Add(sizer_10, 2, wx.ALL | wx.EXPAND, 0)
        sizer_3.Add(self.matplotlib_canvas2, 1, wx.ALL | wx.EXPAND, 5)
        sizer_8.Add(sizer_3, 1, wx.EXPAND, 0)
        sizer_7.Add(sizer_8, 2, wx.EXPAND, 0)
        sizer_1.Add(sizer_7, 2, wx.EXPAND, 0)
        sizer_5.Add((350, 20), 5, 0, 0)
        sizer_5.Add(self.button_10, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 1)
        sizer_5.Add(self.button_6, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 1)
        sizer_5.Add(self.button_3, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 1)
        sizer_5.Add(self.button_8, 0, wx.ALL, 1)
        sizer_5.Add(self.button_7, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 1)
        sizer_1.Add(sizer_5, 0, wx.EXPAND, 0)
        sizer_13.Add((350, 20), 5, 0, 0)
        sizer_13.Add(self.button_9, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 1)
        sizer_13.Add(self.button_5, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 1)
        sizer_13.Add(self.button_4, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 1)
        sizer_1.Add(sizer_13, 0, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

    def OnChooseOutputFile(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'OnChooseOutputFile' not implemented!")
        event.Skip()

    def OnShow(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'OnShow' not implemented!")
        event.Skip()

    def OnPlot(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'OnPlot' not implemented!")
        event.Skip()

    def OnConter(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'OnConter' not implemented!")
        event.Skip()

    def OnExec(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'OnExec' not implemented!")
        event.Skip()

    def OnMxMy(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'OnMxMy' not implemented!")
        event.Skip()

    def On_all_cal(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'On_all_cal' not implemented!")
        event.Skip()

    def OnExport(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'OnExport' not implemented!")
        event.Skip()

    def OnReport(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'OnReport' not implemented!")
        event.Skip()

    def OnCancel(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'OnCancel' not implemented!")
        event.Skip()

# end of class MyFrame

class MyApp(wx.App):
    def OnInit(self):
        self.frame = MyFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
